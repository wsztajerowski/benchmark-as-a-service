name: E2E Production Benchmark Test

on:
  workflow_dispatch:
  pull_request:

env:
  S3_BUCKET: baas-lynx-main
  JAVA_VERSION: 25
  JAVA_DISTRIBUTION: temurin
  MONGOSH_VERSION: 2.5.8

jobs:
  setup-env:
    name: Setup env
    runs-on: ubuntu-latest
    outputs:
      request_id: ${{ steps.gen_request_id.outputs.request_id }}
      result_path: ${{ steps.gen_request_id.outputs.result_path }}
      java_version: ${{ env.JAVA_VERSION }}
      s3_bucket: ${{ env.S3_BUCKET }}
    steps:
      - name: Generate request ID
        id: gen_request_id
        run: |
          ID=CI_E2E_$(date -u +'%Y%m%d_%H%M%S')
          echo "request_id=$ID" >> "$GITHUB_OUTPUT"
          echo "result_path=ci/$ID" >> "$GITHUB_OUTPUT"

#  Prepare test artifacts and upload to S3
  prepare-test:
    name: Build
    runs-on: ubuntu-latest
    needs: setup-env
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.WORKFLOW_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Build runner and benchmark jars
        run: |
          mvn -f ./pom.xml -q clean package -DskipTests
      - name: Upload runner jar to S3 (CI dir)
        run: |
          aws s3 cp ./benchmark-runner/target/benchmark-runner.jar \
          "s3://${{ needs.setup-env.outputs.s3_bucket }}/${{ needs.setup-env.outputs.result_path }}/runner.jar"
      - name: Upload benchmark jar to S3 (CI dir)
        run: |
          aws s3 cp ./fake-jmh-benchmarks/target/fake-jmh-benchmarks.jar \
          "s3://${{ needs.setup-env.outputs.s3_bucket }}/${{ needs.setup-env.outputs.result_path }}/test-benchmark.jar"

  start-runner:
    name: Runner
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/start-ec2-runner.yml
    with:
      aws-region: ${{ vars.AWS_REGION }}
      subnet-id: ${{ vars.SUBNET_ID }}
      security-group-id: ${{ vars.SECURITY_GROUP_ID }}
      tags: |
        project: baas
        environment: ci-run
    secrets:
      workflow-role-arn: ${{ secrets.WORKFLOW_ROLE_ARN }}
      runner-role-name: ${{ secrets.RUNNER_ROLE_NAME }}
      gha-ec2-pat: ${{ secrets.GHA_EC2_PAT }}

  call-workflow-with-async:
    name: Async Profiler
    needs:
      - setup-env
      - prepare-test
      - start-runner
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/exec-single-benchmark.yml
    with:
      gha-runner-type: ${{ needs.start-runner.outputs.label }}
      java-version: ${{ needs.setup-env.outputs.java_version }}
      benchmark-type: jmh-with-async
      request-id: ${{ needs.setup-env.outputs.request_id }}_1
      results-path: ${{ needs.setup-env.outputs.result_path }}
      benchmark-path: "s3://${{ needs.setup-env.outputs.s3_bucket }}/${{ needs.setup-env.outputs.result_path }}/test-benchmark.jar"
      runner-path: "s3://${{ needs.setup-env.outputs.s3_bucket }}/${{ needs.setup-env.outputs.result_path }}/runner.jar"
      s3-result-bucket: ${{ needs.setup-env.outputs.s3_bucket }}
      async-profiler-version: ${{ vars.ASYNC_PROFILER_VERSION }}
      parameters: "--tag source=gha-e2e-test-async Incrementing_Synchronized -f 1 -wi 1 -i 1 --async-event=wall --async-output-type=flamegraph,jfr --async-additional-param threads=true"
    secrets:
      MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}

  call-workflow-with-profilers:
    name: JHM Profilers
    needs:
      - setup-env
      - prepare-test
      - start-runner
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/exec-single-benchmark.yml
    with:
      gha-runner-type: ${{ needs.start-runner.outputs.label }}
      java-version: ${{ needs.setup-env.outputs.java_version }}
      benchmark-type: jmh-with-prof
      request-id: ${{ needs.setup-env.outputs.request_id }}_2
      results-path: ${{ needs.setup-env.outputs.result_path }}
      benchmark-path: "s3://${{ needs.setup-env.outputs.s3_bucket }}/${{ needs.setup-env.outputs.result_path }}/test-benchmark.jar"
      runner-path: "s3://${{ needs.setup-env.outputs.s3_bucket }}/${{ needs.setup-env.outputs.result_path }}/runner.jar"
      s3-result-bucket: ${{ needs.setup-env.outputs.s3_bucket }}
      async-profiler-version: ${{ vars.ASYNC_PROFILER_VERSION }}
      parameters: "--tag source=gha-e2e-test-profilers Incrementing_Synchronized -f 1 -wi 1 -i 1 --profiler 'gc=churn=false;alloc=false' --profiler 'jfr=stackDepth=20'"
    secrets:
      MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}

  stop-runner:
    name: Runner
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/stop-ec2-runner.yml
    needs:
      - start-runner
      - call-workflow-with-async
      - call-workflow-with-profilers
    if: always()
    with:
      label: ${{ needs.start-runner.outputs.label }}
      ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
      aws-region: ${{ vars.AWS_REGION }}
    secrets:
      workflow-role-arn: ${{ secrets.WORKFLOW_ROLE_ARN }}
      gha-ec2-pat: ${{ secrets.GHA_EC2_PAT }}

  verify-test-result:
    name: Verify benchmark results
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs:
      - setup-env
      - call-workflow-with-async
      - call-workflow-with-profilers
    env:
      REQUEST_ID: ${{ needs.setup-env.outputs.request_id }}
      RESULT_PATH: ${{ needs.setup-env.outputs.result_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.WORKFLOW_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Download and install mongosh
        run: |
          wget https://downloads.mongodb.com/compass/mongosh-${{ env.MONGOSH_VERSION }}-linux-x64.tgz
          tar -xzf mongosh-${{ env.MONGOSH_VERSION }}-linux-x64.tgz
          chmod +x mongosh-${{ env.MONGOSH_VERSION }}-linux-x64/bin/mongosh
          echo "$PWD/mongosh-${{ env.MONGOSH_VERSION }}-linux-x64/bin" >> $GITHUB_PATH
      - name: Verify S3 results
        run: |
          .github/test/testing-scripts/verify-s3.sh --bucket "${{ env.S3_BUCKET }}" --key "${{ env.RESULT_PATH }}/jmh-with-async-output.txt" --check-size || exit 1
          .github/test/testing-scripts/verify-s3.sh --bucket "${{ env.S3_BUCKET }}" --key "${{ env.RESULT_PATH }}/jmh-profiler-output.txt" --check-size || exit 1
          .github/test/testing-scripts/verify-s3.sh --bucket "${{ env.S3_BUCKET }}" --key "${{ env.RESULT_PATH }}/pl.wsztajerowski.fake.Incrementing_Synchronized.incrementUsingSynchronized-Throughput/flame-wall-forward.html" || exit 1
          .github/test/testing-scripts/verify-s3.sh --bucket "${{ env.S3_BUCKET }}" --key "${{ env.RESULT_PATH }}/pl.wsztajerowski.fake.Incrementing_Synchronized.incrementUsingSynchronized-Throughput/jfr-wall.jfr" || exit 1
          .github/test/testing-scripts/verify-s3.sh --bucket "${{ env.S3_BUCKET }}" --key "${{ env.RESULT_PATH }}/pl.wsztajerowski.fake.Incrementing_Synchronized.incrementUsingSynchronized-Throughput/profile.jfr" || exit 1
      - name: Verify MongoDB results
        env:
          MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}
        run: |
          .github/test/testing-scripts/verify-mongo.sh --connection-string "$MONGO_CONNECTION_STRING" --collection "jmh_benchmarks" --key "benchmarkMetadata.tags.source" --value gha-e2e-test || exit 1
          .github/test/testing-scripts/verify-mongo.sh --connection-string "$MONGO_CONNECTION_STRING" --collection "jmh_benchmarks" --key "_id.requestId" --value "${{ env.REQUEST_ID }}_1" || exit 1
          .github/test/testing-scripts/verify-mongo.sh --connection-string "$MONGO_CONNECTION_STRING" --collection "jmh_benchmarks" --key "_id.requestId" --value "${{ env.REQUEST_ID }}_2" || exit 1
          .github/test/testing-scripts/verify-mongo.sh --connection-string "$MONGO_CONNECTION_STRING" --collection "jmh_benchmarks" --key "jmhResult.secondaryMetrics.jfr" || exit 1
